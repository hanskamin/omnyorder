"""
API Tools for sending orders to external server and processing responses.

These tools integrate with the browser-use API to execute orders and return results.
"""

import json
import os
from typing import Dict, Any, Optional
import httpx
from litellm import completion


async def send_order_to_api(order_json: str, api_url: Optional[str] = None) -> Dict[str, Any]:
    """
    Sends the generated order to an external API endpoint for processing.
    
    This function takes the order JSON generated by the order generator agent
    and sends it to the browser-use API for execution. The API will process
    the order and return results including items found, prices, and URLs.
    
    Args:
        order_json (str): The complete order in JSON string format. Must contain:
            - budget: float or null
            - dietary_restrictions: list of strings
            - orders: list of order objects with platform and items
        api_url (str, optional): The API endpoint URL. If not provided, uses
            the BROWSER_USE_API_URL environment variable or defaults to
            "https://353b0c23659c.ngrok-free.app/shop/structured"
    
    Returns:
        Dict[str, Any]: API response containing:
            - success: bool indicating if the order was processed
            - site: str platform name (e.g., "Instacart")
            - total_items: int number of items found
            - total_price: float total cost
            - items: list of found items with name, price, brand, size, url
            - error: str or null if there was an error
    
    Example:
        >>> order = '{"budget": 25.0, "dietary_restrictions": [], "orders": [...]}'
        >>> result = send_order_to_api(order)
        >>> print(result["total_price"])
        2.19
    """
    # Determine API URL
    if api_url is None:
        api_url = os.getenv(
            "BROWSER_USE_API_URL",
            "https://353b0c23659c.ngrok-free.app/shop/structured"
        )
    
    try:
        # Parse the order JSON to validate it
        order_data = json.loads(order_json)
        
        # Validate required fields
        if "orders" not in order_data:
            return {
                "success": False,
                "error": "Invalid order format: missing 'orders' field",
                "site": None,
                "total_items": 0,
                "total_price": 0.0,
                "items": []
            }
        
        # Send request to API
        headers = {"Content-Type": "application/json"}
        async with httpx.AsyncClient(timeout=None) as client:
            response = await client.post(
                api_url,
                headers=headers,
                json=order_data
                # No timeout - will wait indefinitely for API response
            )
            
            # Check if request was successful
            response.raise_for_status()
            
            # Parse and return response
            api_response = response.json()
        
        # Ensure response has expected structure
        if not isinstance(api_response, dict):
            return {
                "success": False,
                "error": f"Unexpected response format: {type(api_response)}",
                "site": None,
                "total_items": 0,
                "total_price": 0.0,
                "items": []
            }
        
        return api_response
        
    except json.JSONDecodeError as e:
        return {
            "success": False,
            "error": f"Invalid JSON format in order: {str(e)}",
            "site": None,
            "total_items": 0,
            "total_price": 0.0,
            "items": []
        }
    except httpx.HTTPError as e:
        return {
            "success": False,
            "error": f"API request failed: {str(e)}",
            "site": None,
            "total_items": 0,
            "total_price": 0.0,
            "items": []
        }
    except Exception as e:
        return {
            "success": False,
            "error": f"Unexpected error: {str(e)}",
            "site": None,
            "total_items": 0,
            "total_price": 0.0,
            "items": []
        }


def format_api_response(api_response: Dict[str, Any]) -> str:
    """
    Formats the API response into a JSON with detailed and voice-agent-friendly messages.
    
    This function takes the raw API response and uses LiteLLM with the Nemotron model
    to generate two versions of the message:
    1. detailed_message: A comprehensive message with all order details
    2. voice_agent_message: A concise, conversational message suitable for voice agents
    
    Args:
        api_response (Dict[str, Any]): The API response dictionary containing:
            - success: bool
            - site: str or None
            - total_items: int
            - total_price: float
            - items: list of item dictionaries
            - error: str or None
    
    Returns:
        str: A JSON string with detailed_message and voice_agent_message fields
    
    Example:
        >>> response = {"success": True, "site": "Instacart", "total_items": 2, ...}
        >>> message = format_api_response(response)
        >>> print(message)
        {"detailed_message": "...", "voice_agent_message": "..."}
    """
    # First, build the detailed message as before
    if not api_response.get("success", False):
        error_msg = api_response.get("error", "Unknown error occurred")
        detailed_message = f"‚ùå Order processing failed: {error_msg}"
    else:
        site = api_response.get("site", "Unknown platform")
        total_items = api_response.get("total_items", 0)
        total_price = api_response.get("total_price", 0.0)
        items = api_response.get("items", [])
        
        # Build the detailed message
        message_parts = [
            f"‚úÖ Order successfully processed on {site}!",
            f"\nüì¶ Total items found: {total_items}",
            f"üí∞ Total price: ${total_price:.2f}",
            "\n\nüìã Items:"
        ]
        
        # Add item details
        for idx, item in enumerate(items, 1):
            item_name = item.get("name", "Unknown item")
            item_price = item.get("price", 0.0)
            item_brand = item.get("brand", "")
            item_size = item.get("size", "")
            item_url = item.get("url", "")
            
            item_details = [f"\n{idx}. {item_name}"]
            
            if item_brand:
                item_details.append(f" - Brand: {item_brand}")
            if item_size:
                item_details.append(f" - Size: {item_size}")
            
            item_details.append(f" - Price: ${item_price:.2f}")
            
            if item_url:
                item_details.append(f"\n   üîó {item_url}")
            
            message_parts.append("".join(item_details))
        
        detailed_message = "".join(message_parts)
    
    # Use LiteLLM with Nemotron model to generate voice-agent-friendly message
    try:
        prompt = f"""Given the following detailed order message, create a natural, casual, conversational message like a professional Starbucks barista would say to a customer. The voice message should:
- Use warm, friendly, casual language (like "Awesome!", "Perfect!", "Got it!")
- Sound natural and human, not robotic
- Include specific details: platform name, number of items, individual item names if available, and total price
- Be enthusiastic but professional
- Avoid emojis and special characters
- Be conversational (2-4 sentences)
- Use contractions and natural speech patterns

Detailed message:
{detailed_message}

Respond with ONLY a JSON object in this exact format:
{{"voice_agent_message": "your message here"}}"""
        
        response = completion(
            model="openrouter/nvidia/llama-3.1-nemotron-ultra-253b-v1",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            response_format={"type": "json_object"}
        )
        
        # Extract the voice message from the response
        llm_response = json.loads(response.choices[0].message.content)
        voice_agent_message = llm_response.get("voice_agent_message", "Your order has been processed successfully.")
        
    except Exception as e:
        # Fallback to a simple voice message if LLM call fails
        if not api_response.get("success", False):
            voice_agent_message = f"Sorry, there was an error processing your order: {api_response.get('error', 'Unknown error')}"
        else:
            site = api_response.get("site", "the platform")
            total_items = api_response.get("total_items", 0)
            total_price = api_response.get("total_price", 0.0)
            voice_agent_message = f"Great! I found {total_items} items on {site} for a total of ${total_price:.2f}."
    
    # Return JSON with both messages
    result = {
        "detailed_message": detailed_message,
        "voice_agent_message": voice_agent_message
    }
    
    return json.dumps(result, indent=2)
